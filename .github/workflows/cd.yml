name: CD

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main, dev]
    types:
      - completed

env:
  NODE_VERSION: "20.x"

jobs:
  #Only run deployment if CI passed
  check-ci:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    steps:
      - name: CI Status Check
        run: echo "CI passed, proceeding with deployment"

  # Build and prepare artifacts
  build:
    needs: [check-ci]
    runs-on: ubuntu-latest
    if: always() && (needs.check-ci.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build all services
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deployment-package

          # Copy built React app
          cp -r apps/react-web/dist deployment-package/react-web

          # Copy built backend services
          cp -r apps/api-gateway/dist deployment-package/api-gateway
          cp -r apps/agent-orchestrator/dist deployment-package/agent-orchestrator
          cp -r apps/pdf-workflows/dist deployment-package/pdf-workflows
          cp -r apps/slack-bot/dist deployment-package/slack-bot

          # Copy package files and configs
          cp package.json deployment-package/
          cp -r packages deployment-package/

          # Copy environment configs
          cp -r apps/react-web/.env.example deployment-package/react-web/.env.production || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package/
          retention-days: 30

  # Deploy to Staging Environment
  deploy-staging:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: staging
      url: https://apexflow-staging.yourapp.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment-package/

      - name: Deploy React Frontend to Staging
        run: |
          echo "ðŸš€ Deploying React frontend to staging..."
          # Add your frontend deployment commands here
          # Examples:
          # - Deploy to Vercel: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # - Deploy to Netlify: netlify deploy --prod --auth ${{ secrets.NETLIFY_TOKEN }}
          # - Deploy to S3: aws s3 sync deployment-package/react-web s3://staging-bucket
          echo "Frontend deployed to staging"

      - name: Deploy Backend Services to Staging
        run: |
          echo "ðŸš€ Deploying backend services to staging..."
          # Add your backend deployment commands here
          # Examples:
          # - Deploy to Railway: railway deploy
          # - Deploy to Heroku: git push heroku main
          # - Deploy to AWS ECS/Lambda
          # - Deploy to Google Cloud Run
          # - SSH to server and restart services
          echo "Backend services deployed to staging"

      - name: Run Database Migrations (Staging)
        run: |
          echo "ðŸ“Š Running database migrations for staging..."
          # Add database migration commands
          # Examples:
          # - npm run migrate:staging
          # - npx prisma migrate deploy
          echo "Database migrations completed"

      - name: Health Check - Staging
        run: |
          echo "ðŸ©º Running health checks on staging..."
          # Add health check commands
          # curl -f https://api-staging.yourapp.com/health || exit 1
          echo "Health checks passed"

  # Deploy to Production Environment
  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://apexflow.yourapp.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment-package/

      - name: Deploy React Frontend to Production
        run: |
          echo "ðŸš€ Deploying React frontend to production..."
          # Add your production frontend deployment commands
          echo "Frontend deployed to production"

      - name: Deploy Backend Services to Production
        run: |
          echo "ðŸš€ Deploying backend services to production..."
          # Add your production backend deployment commands
          echo "Backend services deployed to production"

      - name: Run Database Migrations (Production)
        run: |
          echo "ðŸ“Š Running database migrations for production..."
          # Add production database migration commands
          echo "Database migrations completed"

      - name: Health Check - Production
        run: |
          echo "ðŸ©º Running health checks on production..."
          # Add production health check commands
          echo "Health checks passed"

      - name: Notify Success
        run: |
          echo "âœ… Production deployment completed successfully!"
          # Add notification commands (Slack, email, etc.)

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    steps:
      - name: Rollback Production
        run: |
          echo "ðŸ”„ Rolling back production deployment..."
          # Add rollback commands
          echo "Rollback completed"
