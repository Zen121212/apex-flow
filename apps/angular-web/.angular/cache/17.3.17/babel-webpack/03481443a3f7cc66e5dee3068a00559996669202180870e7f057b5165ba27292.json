{"ast":null,"code":"import _asyncToGenerator from \"/Users/Zen/Desktop/ApexFlow/apps/angular-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet UploadModalComponent = class UploadModalComponent {\n  constructor() {\n    this.isVisible = false;\n    this.close = new EventEmitter();\n    this.filesUploaded = new EventEmitter();\n    this.files = signal([]);\n    this.dragOver = signal(false);\n    this.uploading = signal(false);\n    this.selectedWorkflowId = signal(null);\n    this.uploadFiles = this.files.asReadonly();\n    this.isDragOver = this.dragOver.asReadonly();\n    this.isUploading = this.uploading.asReadonly();\n    this.selectedWorkflow = this.selectedWorkflowId.asReadonly();\n    this.extractText = true;\n    this.enableSearch = true;\n    this.workflowOptions = signal([{\n      id: 'ocr',\n      name: 'OCR Processing',\n      description: 'Extract text from images and scanned documents',\n      icon: 'üî§'\n    }, {\n      id: 'invoice',\n      name: 'Invoice Processing',\n      description: 'Extract data from invoices automatically',\n      icon: 'üßæ'\n    }, {\n      id: 'contract',\n      name: 'Contract Analysis',\n      description: 'Analyze contracts for key terms and compliance',\n      icon: 'üìã'\n    }, {\n      id: 'classification',\n      name: 'Document Classification',\n      description: 'Automatically categorize documents by type',\n      icon: 'üè∑Ô∏è'\n    }]);\n  }\n  onOverlayClick(event) {\n    if (event.target === event.currentTarget) {\n      this.onClose();\n    }\n  }\n  onClose() {\n    this.close.emit();\n    this.resetModal();\n  }\n  onDragOver(event) {\n    event.preventDefault();\n    this.dragOver.set(true);\n  }\n  onDragLeave(event) {\n    event.preventDefault();\n    this.dragOver.set(false);\n  }\n  onDrop(event) {\n    event.preventDefault();\n    this.dragOver.set(false);\n    const files = Array.from(event.dataTransfer?.files || []);\n    this.addFiles(files);\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    if (input.files) {\n      const files = Array.from(input.files);\n      this.addFiles(files);\n    }\n  }\n  addFiles(files) {\n    const newFiles = files.map(file => this.createUploadFile(file));\n    this.files.update(current => [...current, ...newFiles]);\n  }\n  createUploadFile(file) {\n    return {\n      file,\n      id: Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      size: this.formatFileSize(file.size),\n      type: this.getFileType(file.name),\n      progress: 0,\n      status: 'pending'\n    };\n  }\n  getFileType(fileName) {\n    const extension = fileName.split('.').pop()?.toLowerCase() || '';\n    return extension;\n  }\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n  removeFile(fileId) {\n    this.files.update(current => current.filter(f => f.id !== fileId));\n  }\n  clearFiles() {\n    this.files.set([]);\n  }\n  selectWorkflow(workflowId) {\n    this.selectedWorkflowId.set(this.selectedWorkflowId() === workflowId ? null : workflowId);\n  }\n  trackByFileId(index, file) {\n    return file.id;\n  }\n  startUpload() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.uploading.set(true);\n      const pendingFiles = _this.files().filter(f => f.status === 'pending');\n      for (const file of pendingFiles) {\n        yield _this.uploadFile(file);\n      }\n      _this.uploading.set(false);\n      _this.filesUploaded.emit(_this.files());\n      // Close modal after successful upload\n      setTimeout(() => {\n        _this.onClose();\n      }, 1000);\n    })();\n  }\n  uploadFile(uploadFile) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Update file status to uploading\n      _this2.files.update(current => current.map(f => f.id === uploadFile.id ? {\n        ...f,\n        status: 'uploading'\n      } : f));\n      // Simulate upload progress\n      for (let progress = 0; progress <= 100; progress += 10) {\n        yield _this2.delay(100);\n        _this2.files.update(current => current.map(f => f.id === uploadFile.id ? {\n          ...f,\n          progress\n        } : f));\n      }\n      // Mark as completed\n      _this2.files.update(current => current.map(f => f.id === uploadFile.id ? {\n        ...f,\n        status: 'completed',\n        progress: 100\n      } : f));\n    })();\n  }\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  resetModal() {\n    this.files.set([]);\n    this.dragOver.set(false);\n    this.uploading.set(false);\n    this.selectedWorkflowId.set(null);\n    this.extractText = true;\n    this.enableSearch = true;\n  }\n};\n__decorate([Input()], UploadModalComponent.prototype, \"isVisible\", void 0);\n__decorate([Output()], UploadModalComponent.prototype, \"close\", void 0);\n__decorate([Output()], UploadModalComponent.prototype, \"filesUploaded\", void 0);\nUploadModalComponent = __decorate([Component({\n  selector: 'app-upload-modal',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"modal-overlay\" [class.visible]=\"isVisible\" (click)=\"onOverlayClick($event)\">\n      <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\n        <div class=\"modal-header\">\n          <h2>Upload Documents</h2>\n          <button class=\"close-btn\" (click)=\"onClose()\">&times;</button>\n        </div>\n\n        <div class=\"modal-body\">\n          <!-- Upload Area -->\n          <div class=\"upload-section\" *ngIf=\"uploadFiles().length === 0\">\n            <div \n              class=\"upload-zone\"\n              [class.drag-over]=\"isDragOver()\"\n              (dragover)=\"onDragOver($event)\"\n              (dragleave)=\"onDragLeave($event)\"\n              (drop)=\"onDrop($event)\"\n              (click)=\"fileInput.click()\"\n            >\n              <div class=\"upload-icon\">üìÅ</div>\n              <h3>Drag and drop files here</h3>\n              <p>or click to browse files</p>\n              <div class=\"supported-formats\">\n                <span class=\"format\">PDF</span>\n                <span class=\"format\">DOC</span>\n                <span class=\"format\">DOCX</span>\n                <span class=\"format\">TXT</span>\n                <span class=\"format\">JPG</span>\n                <span class=\"format\">PNG</span>\n              </div>\n            </div>\n            <input \n              #fileInput\n              type=\"file\" \n              multiple \n              accept=\".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png\"\n              (change)=\"onFileSelected($event)\"\n              style=\"display: none;\"\n            />\n          </div>\n\n          <!-- File List -->\n          <div class=\"files-section\" *ngIf=\"uploadFiles().length > 0\">\n            <div class=\"files-header\">\n              <h3>Selected Files ({{ uploadFiles().length }})</h3>\n              <button class=\"btn btn-secondary btn-sm\" (click)=\"clearFiles()\">Clear All</button>\n            </div>\n            \n            <div class=\"files-list\">\n              <div class=\"file-item\" *ngFor=\"let file of uploadFiles(); trackBy: trackByFileId\">\n                <div class=\"file-icon\">\n                  <span [ngSwitch]=\"file.type\">\n                    <span *ngSwitchCase=\"'pdf'\">üìÑ</span>\n                    <span *ngSwitchCase=\"'doc'\">üìù</span>\n                    <span *ngSwitchCase=\"'docx'\">üìù</span>\n                    <span *ngSwitchCase=\"'txt'\">üìÑ</span>\n                    <span *ngSwitchCase=\"'jpg'\">üñºÔ∏è</span>\n                    <span *ngSwitchCase=\"'jpeg'\">üñºÔ∏è</span>\n                    <span *ngSwitchCase=\"'png'\">üñºÔ∏è</span>\n                    <span *ngSwitchDefault>üìé</span>\n                  </span>\n                </div>\n                \n                <div class=\"file-info\">\n                  <div class=\"file-name\">{{ file.name }}</div>\n                  <div class=\"file-size\">{{ file.size }}</div>\n                  <div class=\"progress-bar\" *ngIf=\"file.status === 'uploading'\">\n                    <div class=\"progress-fill\" [style.width.%]=\"file.progress\"></div>\n                  </div>\n                </div>\n                \n                <div class=\"file-status\">\n                  <span class=\"status-icon\" [ngSwitch]=\"file.status\">\n                    <span *ngSwitchCase=\"'pending'\" class=\"pending\">‚è≥</span>\n                    <span *ngSwitchCase=\"'uploading'\" class=\"uploading\">‚ö°</span>\n                    <span *ngSwitchCase=\"'completed'\" class=\"completed\">‚úÖ</span>\n                    <span *ngSwitchCase=\"'error'\" class=\"error\">‚ùå</span>\n                  </span>\n                </div>\n                \n                <button \n                  class=\"remove-btn\" \n                  (click)=\"removeFile(file.id)\"\n                  *ngIf=\"file.status !== 'uploading'\"\n                >\n                  √ó\n                </button>\n              </div>\n            </div>\n            \n            <button class=\"btn btn-link add-more\" (click)=\"fileInput.click()\">\n              + Add more files\n            </button>\n          </div>\n\n          <!-- Workflow Selection -->\n          <div class=\"workflow-section\" *ngIf=\"uploadFiles().length > 0\">\n            <h3>Apply Workflow (Optional)</h3>\n            <p class=\"section-description\">Choose a workflow to automatically process your documents</p>\n            \n            <div class=\"workflow-options\">\n              <div \n                class=\"workflow-option\" \n                *ngFor=\"let workflow of workflowOptions()\"\n                [class.selected]=\"selectedWorkflow() === workflow.id\"\n                (click)=\"selectWorkflow(workflow.id)\"\n              >\n                <div class=\"workflow-icon\">{{ workflow.icon }}</div>\n                <div class=\"workflow-info\">\n                  <h4>{{ workflow.name }}</h4>\n                  <p>{{ workflow.description }}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Upload Options -->\n          <div class=\"options-section\" *ngIf=\"uploadFiles().length > 0\">\n            <div class=\"option\">\n              <input \n                type=\"checkbox\" \n                id=\"extractText\" \n                [(ngModel)]=\"extractText\"\n              />\n              <label for=\"extractText\">Extract text automatically (OCR)</label>\n            </div>\n            <div class=\"option\">\n              <input \n                type=\"checkbox\" \n                id=\"enableSearch\" \n                [(ngModel)]=\"enableSearch\"\n              />\n              <label for=\"enableSearch\">Enable semantic search</label>\n            </div>\n          </div>\n\n          <!-- Action Buttons -->\n          <div class=\"modal-actions\" *ngIf=\"uploadFiles().length > 0\">\n            <button class=\"btn btn-secondary\" (click)=\"onClose()\">Cancel</button>\n            <button \n              class=\"btn btn-primary\" \n              (click)=\"startUpload()\"\n              [disabled]=\"isUploading() || uploadFiles().every(f => f.status === 'completed')\"\n            >\n              {{ isUploading() ? 'Uploading...' : 'Upload Files' }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .modal-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n      opacity: 0;\n      visibility: hidden;\n      transition: all 0.3s ease;\n    }\n\n    .modal-overlay.visible {\n      opacity: 1;\n      visibility: visible;\n    }\n\n    .modal-content {\n      background: white;\n      border-radius: 12px;\n      width: 100%;\n      max-width: 600px;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n      transform: translateY(-50px);\n      transition: transform 0.3s ease;\n    }\n\n    .modal-overlay.visible .modal-content {\n      transform: translateY(0);\n    }\n\n    .modal-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1.5rem 2rem;\n      border-bottom: 1px solid #e5e7eb;\n    }\n\n    .modal-header h2 {\n      margin: 0;\n      font-size: 1.5rem;\n      font-weight: 600;\n      color: #111827;\n    }\n\n    .close-btn {\n      background: none;\n      border: none;\n      font-size: 1.5rem;\n      color: #6b7280;\n      cursor: pointer;\n      padding: 0.25rem;\n      border-radius: 50%;\n      width: 2rem;\n      height: 2rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: all 0.2s;\n    }\n\n    .close-btn:hover {\n      background: #f3f4f6;\n      color: #374151;\n    }\n\n    .modal-body {\n      padding: 2rem;\n    }\n\n    .upload-zone {\n      border: 2px dashed #d1d5db;\n      border-radius: 12px;\n      padding: 3rem 2rem;\n      text-align: center;\n      cursor: pointer;\n      transition: all 0.2s;\n      background: #f9fafb;\n    }\n\n    .upload-zone:hover,\n    .upload-zone.drag-over {\n      border-color: #667eea;\n      background: #f0f4ff;\n    }\n\n    .upload-icon {\n      font-size: 3rem;\n      margin-bottom: 1rem;\n      opacity: 0.6;\n    }\n\n    .upload-zone h3 {\n      margin: 0 0 0.5rem 0;\n      color: #374151;\n      font-weight: 500;\n    }\n\n    .upload-zone p {\n      margin: 0 0 1rem 0;\n      color: #6b7280;\n    }\n\n    .supported-formats {\n      display: flex;\n      justify-content: center;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n    }\n\n    .format {\n      background: #e5e7eb;\n      color: #6b7280;\n      padding: 0.25rem 0.5rem;\n      border-radius: 4px;\n      font-size: 0.75rem;\n      font-weight: 500;\n    }\n\n    .files-section {\n      margin-top: 1.5rem;\n    }\n\n    .files-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 1rem;\n    }\n\n    .files-header h3 {\n      margin: 0;\n      color: #374151;\n      font-weight: 500;\n    }\n\n    .files-list {\n      display: grid;\n      gap: 0.75rem;\n      margin-bottom: 1rem;\n    }\n\n    .file-item {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      padding: 1rem;\n      border: 1px solid #e5e7eb;\n      border-radius: 8px;\n      background: #f9fafb;\n    }\n\n    .file-icon {\n      font-size: 1.5rem;\n      width: 2.5rem;\n      height: 2.5rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: white;\n      border-radius: 6px;\n    }\n\n    .file-info {\n      flex: 1;\n    }\n\n    .file-name {\n      font-weight: 500;\n      color: #374151;\n      margin-bottom: 0.25rem;\n      font-size: 0.875rem;\n    }\n\n    .file-size {\n      color: #6b7280;\n      font-size: 0.75rem;\n    }\n\n    .progress-bar {\n      width: 100%;\n      height: 4px;\n      background: #e5e7eb;\n      border-radius: 2px;\n      margin-top: 0.5rem;\n      overflow: hidden;\n    }\n\n    .progress-fill {\n      height: 100%;\n      background: #667eea;\n      transition: width 0.3s ease;\n    }\n\n    .file-status {\n      display: flex;\n      align-items: center;\n    }\n\n    .status-icon.pending { color: #f59e0b; }\n    .status-icon.uploading { color: #667eea; }\n    .status-icon.completed { color: #10b981; }\n    .status-icon.error { color: #ef4444; }\n\n    .remove-btn {\n      background: none;\n      border: none;\n      color: #9ca3af;\n      cursor: pointer;\n      font-size: 1.25rem;\n      padding: 0.25rem;\n      border-radius: 50%;\n      width: 1.5rem;\n      height: 1.5rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: all 0.2s;\n    }\n\n    .remove-btn:hover {\n      color: #ef4444;\n      background: #fee2e2;\n    }\n\n    .workflow-section {\n      margin-top: 2rem;\n      padding-top: 1.5rem;\n      border-top: 1px solid #e5e7eb;\n    }\n\n    .workflow-section h3 {\n      margin: 0 0 0.5rem 0;\n      color: #374151;\n      font-weight: 500;\n    }\n\n    .section-description {\n      margin: 0 0 1rem 0;\n      color: #6b7280;\n      font-size: 0.875rem;\n    }\n\n    .workflow-options {\n      display: grid;\n      gap: 0.75rem;\n    }\n\n    .workflow-option {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      padding: 1rem;\n      border: 2px solid #e5e7eb;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s;\n    }\n\n    .workflow-option:hover {\n      border-color: #d1d5db;\n    }\n\n    .workflow-option.selected {\n      border-color: #667eea;\n      background: #f0f4ff;\n    }\n\n    .workflow-icon {\n      font-size: 1.5rem;\n      width: 2.5rem;\n      height: 2.5rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: white;\n      border-radius: 6px;\n    }\n\n    .workflow-info h4 {\n      margin: 0 0 0.25rem 0;\n      color: #374151;\n      font-weight: 500;\n      font-size: 0.875rem;\n    }\n\n    .workflow-info p {\n      margin: 0;\n      color: #6b7280;\n      font-size: 0.75rem;\n    }\n\n    .options-section {\n      margin-top: 1.5rem;\n      padding-top: 1.5rem;\n      border-top: 1px solid #e5e7eb;\n    }\n\n    .option {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      margin-bottom: 0.75rem;\n    }\n\n    .option input[type=\"checkbox\"] {\n      width: 1rem;\n      height: 1rem;\n      accent-color: #667eea;\n    }\n\n    .option label {\n      color: #374151;\n      font-size: 0.875rem;\n      cursor: pointer;\n    }\n\n    .modal-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      margin-top: 2rem;\n      padding-top: 1.5rem;\n      border-top: 1px solid #e5e7eb;\n    }\n\n    .btn {\n      padding: 0.75rem 1.5rem;\n      border: none;\n      border-radius: 8px;\n      font-weight: 500;\n      cursor: pointer;\n      transition: all 0.2s;\n      font-size: 0.875rem;\n    }\n\n    .btn:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #667eea;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #5a67d8;\n    }\n\n    .btn-secondary {\n      background: white;\n      color: #374151;\n      border: 1px solid #d1d5db;\n    }\n\n    .btn-secondary:hover {\n      background: #f9fafb;\n    }\n\n    .btn-sm {\n      padding: 0.5rem 1rem;\n      font-size: 0.75rem;\n    }\n\n    .btn-link {\n      background: none;\n      color: #667eea;\n      border: none;\n      padding: 0.5rem;\n      font-size: 0.875rem;\n    }\n\n    .btn-link:hover {\n      color: #5a67d8;\n      text-decoration: underline;\n    }\n\n    .add-more {\n      display: block;\n      margin: 0 auto;\n    }\n  `]\n})], UploadModalComponent);\nexport { UploadModalComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}